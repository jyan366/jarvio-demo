import React from 'react';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { FileText, TrendingUp, Layout, Activity, Clock } from 'lucide-react';
import { DocumentMetadata } from '@/types/docs';
import { cn } from '@/lib/utils';

interface CategorySidebarProps {
  documents: DocumentMetadata[];
  activeSection?: string;
  onCategoryClick: (categoryId: string) => void;
}

interface CategoryInfo {
  id: string;
  name: string;
  icon: React.ComponentType<any>;
  count: number;
  description: string;
}

export function CategorySidebar({ documents, activeSection, onCategoryClick }: CategorySidebarProps) {
  // Calculate document counts by category
  const documentsByCategory = documents.reduce((acc, doc) => {
    if (!acc[doc.category]) {
      acc[doc.category] = [];
    }
    acc[doc.category].push(doc);
    return acc;
  }, {} as Record<string, DocumentMetadata[]>);

  const categories: CategoryInfo[] = [
    {
      id: 'activity',
      name: 'Flow Activity',
      icon: Activity,
      count: documents.filter(d => d.isAutoGenerated).length,
      description: 'Live flow status and recent activity'
    },
    {
      id: 'recent',
      name: 'Recent',
      icon: Clock,
      count: Math.min(5, documents.length),
      description: 'Recently updated documents'
    },
    {
      id: 'outputs',
      name: 'Workflow Outputs',
      icon: TrendingUp,
      count: documentsByCategory.outputs?.length || 0,
      description: 'Auto-generated flow outputs'
    },
    {
      id: 'documents',
      name: 'My Documents',
      icon: FileText,
      count: documentsByCategory.documents?.length || 0,
      description: 'Manually created documents'
    },
    {
      id: 'templates',
      name: 'Templates',
      icon: Layout,
      count: documentsByCategory.templates?.length || 0,
      description: 'Reusable document templates'
    }
  ].filter(category => {
    // Only show categories that have content
    if (category.id === 'activity') return documents.some(d => d.isAutoGenerated);
    if (category.id === 'recent') return documents.length > 0;
    return category.count > 0;
  });

  return (
    <div className="flex flex-col h-full">
      <div className="p-4 border-b">
        <h2 className="font-semibold text-foreground">Categories</h2>
        <p className="text-xs text-muted-foreground mt-1">
          Navigate to sections
        </p>
      </div>
      
      <ScrollArea className="flex-1 scrollbar-hide">
        <div className="p-2 space-y-1">
          {categories.map((category) => {
            const Icon = category.icon;
            const isActive = activeSection === category.id;
            
            return (
              <Button
                key={category.id}
                variant="ghost"
                size="sm"
                onClick={() => onCategoryClick(category.id)}
                className={cn(
                  "w-full justify-start h-auto p-3 text-left",
                  isActive && "bg-primary/10 text-primary font-medium"
                )}
              >
                <div className="flex items-start gap-3 w-full">
                  <Icon className={cn(
                    "h-4 w-4 mt-0.5 shrink-0",
                    isActive ? "text-primary" : "text-muted-foreground"
                  )} />
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium truncate">
                        {category.name}
                      </span>
                      <span className={cn(
                        "text-xs px-1.5 py-0.5 rounded-full bg-muted",
                        isActive && "bg-primary/20 text-primary"
                      )}>
                        {category.count}
                      </span>
                    </div>
                    <p className="text-xs text-muted-foreground mt-0.5 line-clamp-2">
                      {category.description}
                    </p>
                  </div>
                </div>
              </Button>
            );
          })}
        </div>
      </ScrollArea>
    </div>
  );
}